package com.example.demo.utils.DesignPattern;

/**
 * @Author: likang
 * @Date: 2021/2/12 12:18
 */
public class Intructor {

    /**
     * 一套用来提高代码可复用性、可维护性、可读性、稳健性以及安全性的解决方案。
     * 1. 根据目的来分
     *创建型模式：怎样创建对象
     *  单例、原型、工厂方法、抽象工厂、建造者
     *
     *结构型模式：类和对象组合成更大的结构
     *  代理、适配器、桥接、装饰、外观、享元、组合
     *
     *行为型模式：类和对象之间的协作
     *  模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器
     */

    /**
     * 2. 根据作用范围来分
     *类模式:处理类与子类之间的关系
     *  工厂方法、（类）适配器、模板方法、解释器
     *
     *对象模式：用于处理对象之间的关系
     */
    /**
     * 原则：
     * 1.开闭原则：抽象约束、封装变化
     *
     *2.里氏替换原则：子类可以扩展父类的功能，但不能改变父类原有的功能
     *
     *3.依赖倒置原则：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象
     *
     * 4.单一职责原则
     *
     * 5.接口隔离原则 ：提高类的内聚性、降低它们之间的耦合性
     *
     * 6.合成复用原则：在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现
     */

}
